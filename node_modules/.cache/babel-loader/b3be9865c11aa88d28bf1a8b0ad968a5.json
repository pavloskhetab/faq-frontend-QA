{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\faq-frontend\\\\src\\\\Components\\\\AskQuestionModal.component.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport Modal from 'react-bootstrap/Modal';\nimport './css/FAQ.css';\n\nclass AskQuestionsModal extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.postQuestion = e => {\n      e.preventDefault();\n      let questionContent = document.getElementById(\"textQuestion\").value;\n      alert(questionContent);\n      let data = {\n        \"userID\": 1,\n        //We create a variable called data and store what is currently in the state into it\n        \"question\": questionContent\n      };\n      fetch(\"http://localhost:4001/Questions/PostQ\", {\n        //This is the fetch request that actually communicates with the backend\n        method: 'POST',\n        //This defines the method as a POST method\n        headers: {\n          'Content-Type': 'application/json' //This converts it into JSON format\n\n        },\n        body: JSON.stringify(data)\n      }).then(response => {\n        //Error handling\n        if (response.status === 200) {\n          window.location.replace(\"http://localhost:3000/\");\n        } else {\n          alert('Failed to post QQQ');\n        }\n\n        ;\n      });\n    };\n\n    this.state = {\n      showModal: this.props.showModal,\n      content: this.props.content,\n      title: this.props.title\n    };\n\n    this.close = () => {\n      this.setState({\n        showModal: this.props.showModal\n      });\n    };\n    /* Function not used\r\n    this.open = () => {\r\n        this.setState({ showModal: true });\r\n    }; */\n\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      showModal: nextProps.showModal\n    });\n  }\n\n  render() {\n    return React.createElement(Modal, {\n      show: this.state.showModal,\n      onHide: this.props.close ? this.props.close : this.close,\n      backdrop: true,\n      backdropClassName: \"backdrop-style\",\n      dialogClassName: \"modal-style\",\n      \"aria-labelledby\": \"modal-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      id: \"modal-label\",\n      className: \"overlay-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Ask A Question\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, this.state.content), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.postQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \" Submit\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: this.props.close ? this.props.close : this.close,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \" Close\")));\n  }\n\n}\n\nexport default AskQuestionsModal;","map":{"version":3,"sources":["C:/Users/admin/Desktop/faq-frontend/src/Components/AskQuestionModal.component.js"],"names":["React","Component","Button","Modal","AskQuestionsModal","constructor","args","postQuestion","e","preventDefault","questionContent","document","getElementById","value","alert","data","fetch","method","headers","body","JSON","stringify","then","response","status","window","location","replace","state","showModal","props","content","title","close","setState","componentWillReceiveProps","nextProps","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport './css/FAQ.css'\r\n\r\nclass AskQuestionsModal extends Component {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.state = {\r\n            showModal: this.props.showModal,\r\n            content: this.props.content,\r\n            title: this.props.title\r\n        };\r\n        this.close = () => {\r\n            this.setState({ showModal: this.props.showModal });\r\n        };\r\n        /* Function not used\r\n        this.open = () => {\r\n            this.setState({ showModal: true });\r\n        }; */\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            showModal: nextProps.showModal\r\n        })\r\n    }\r\n    postQuestion = (e) => {\r\n        e.preventDefault();\r\n        let questionContent = document.getElementById(\"textQuestion\").value\r\n        alert(questionContent)\r\n            let data = {\r\n                \r\n                \"userID\": 1,                                                                  //We create a variable called data and store what is currently in the state into it\r\n                \"question\": questionContent\r\n            }\r\n            fetch(`http://localhost:4001/Questions/PostQ`, {                                    //This is the fetch request that actually communicates with the backend\r\n                method: 'POST',                                                             //This defines the method as a POST method\r\n                headers: {\r\n                    'Content-Type': 'application/json',                                     //This converts it into JSON format\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(response => {                                                         //Error handling\r\n                    if (response.status === 200) {\r\n                        window.location.replace(`http://localhost:3000/`);\r\n                    } else {\r\n                        alert('Failed to post QQQ');\r\n                    };\r\n                })\r\n            \r\n        }\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                show={this.state.showModal}\r\n                onHide={this.props.close ? this.props.close : this.close}\r\n                backdrop={true}\r\n                backdropClassName=\"backdrop-style\"\r\n                dialogClassName=\"modal-style\"\r\n                aria-labelledby=\"modal-label\"\r\n            >\r\n                <Modal.Header closeButton={true}>\r\n                    <h4 id=\"modal-label\" className=\"overlay-title\">Ask A Question</h4>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {this.state.content}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    \r\n                    <Button variant='primary' onClick={this.postQuestion}> Submit\r\n                    </Button><br></br>\r\n                    <Button variant='secondary' onClick={this.props.close ? this.props.close : this.close}> Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\nexport default AskQuestionsModal;\r\n"]},"metadata":{},"sourceType":"module"}