{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\faq-frontend\\\\src\\\\Components\\\\FAQMainPage.js\";\nimport React from 'react';\nimport { Form } from 'react-bootstrap';\nimport './css/FAQ.css';\nimport DeleteQuestionModal from './DeleteQuestionModal.component';\nimport Search from './Search.component';\nimport Answer from './AnswerPage.component';\nimport { TextArea } from 'semantic-ui-react';\nexport default class Home extends React.Component {\n  constructor() {\n    super();\n\n    this.search = e => {\n      e.preventDefault();\n      var initialString = document.getElementById(\"searchText\").value;\n      var queryString = initialString.replace(/[^a-zA-Z ]/g, \"\");\n      sessionStorage.setItem('SearchText', queryString);\n      this.setState({\n        search: true\n      });\n    };\n\n    this.handleButtonToggleDeleteQuestionModal = (toggle, q_id) => {\n      this.setState({\n        showModalq: toggle\n      });\n      sessionStorage.setItem('q_id', q_id);\n    };\n\n    this.editQuestion = (q_id, spanid, question) => {\n      var ref = document.getElementById(spanid);\n      ref.innerHTML = \"\";\n      var refTextInput1 = document.createElement(\"TextArea\");\n      var refConfirmButton1 = document.createElement(\"input\");\n      refConfirmButton1.type = \"Button\";\n      refConfirmButton1.value = \"Confirm\";\n      refConfirmButton1.className = \"EditConfirm\";\n      refConfirmButton1.addEventListener(\"click\", function () {\n        let data = {\n          \"q_id\": q_id,\n          \"updQ\": refTextInput1.value\n        };\n        fetch(\"http://localhost:4001/Questions/UpdateQ\", {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        window.location.replace(\"http://localhost:3000/\");\n      });\n      refTextInput1.style.minWidth = \"60%\";\n      refTextInput1.style.maxWidth = \"60%\";\n      refTextInput1.style.marginLeft = \"20px\";\n      refTextInput1.value = question;\n      ref.appendChild(refTextInput1);\n      ref.appendChild(refConfirmButton1);\n    };\n\n    this.componentDidMount = async () => {\n      let dataUnanswered = \"\";\n      let dataRecent = \"\";\n      await fetch(\"http://localhost:4001/Questions/RecentQ\") //Url from backend\n      .then(response => response.json()).then(dataRe => {\n        dataRecent = dataRe;\n      });\n      await fetch(\"http://localhost:4001/Questions/UnansweredQ\") //Url from backend\n      .then(response => response.json()).then(dataUn => {\n        dataUnanswered = dataUn;\n      });\n      await fetch(\"http://localhost:4001/Questions/TopRatedQ\") //Url from backend\n      .then(response => response.json()).then(dataTop => {\n        this.setState({\n          RecentQ: dataRecent,\n          UnansweredQ: dataUnanswered,\n          TopRatedQ: dataTop\n        });\n      });\n    };\n\n    this.handleButtonToggleAskModal = toggle => {\n      this.setState({\n        showModal: toggle\n      });\n    };\n\n    this.textAnswer = () => {\n      return React.createElement(TextArea, {\n        id: \"textQuestion\",\n        style: {\n          maxWidth: '100%',\n          minWidth: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      });\n    };\n\n    this.callchange = e => {\n      console.log(e.keyCode);\n\n      if (e.keyCode == 13) {\n        this.search(e);\n      } //e.preventDefault()\n\n    };\n\n    this.state = {\n      //this.state represent the rendered values, i.e. whatâ€™s currently on the screen\n      RecentQ: [],\n      UnansweredQ: [],\n      TopRatedQ: [],\n      showIssueModal: true,\n      search: false,\n      Answer: false //Name of what you want \n\n    };\n  }\n  /**\r\n   * the search function takes the text in the search bar, filters out special characters and stores the result in the session storage.\r\n   * it then sets the search state as true which will trigger the rendering of the search component.\r\n   * @memberof Home\r\n   */\n\n\n  /**\r\n   *The Qstorage is simply a function to set values to specific items within the sessionStorage,\r\n   * this allows them to be referenced and used elsewhere within the application\r\n     * @param {*} question\r\n   * @param {*} q_id\r\n   * @param {*} postDQ\r\n   * @param {*} postTQ\r\n   * @memberof Home\r\n   */\n  Qstorage(question, q_id, postDQ, postTQ) {\n    sessionStorage.setItem('questions', question);\n    sessionStorage.setItem('q_id', q_id);\n    sessionStorage.setItem('postDQ', postDQ);\n    sessionStorage.setItem('postTQ', postTQ);\n    this.setState({\n      Answer: true\n    });\n  }\n  /**\r\n   * The editQuestion function allows a user to amend a question they have previously submitted\r\n   * @memberof Home\r\n   */\n\n\n  render() {\n    /**\r\n     * This if statement checks whether the current webpage is on the search page - If true, it completes\r\n     * a search of the DB for the entered fields, if nothing is found displays a message and shows the AskQuestion\r\n     * button\r\n     * @returns\r\n     * @memberof Home\r\n     */\n    if (this.state.search == true) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Search, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }));\n    } else if (this.state.Answer == true) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Answer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }));\n    }\n    /**\r\n    * This else statement executes when the user first loads the homepage and displays a range of certain\r\n    * specified questions - eg trending etc - along with the edit and delete buttons if the user has the\r\n    * appropriate permissions\r\n    * @returns\r\n    * @memberof Home\r\n    */\n    else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211\n          },\n          __self: this\n        }, React.createElement(\"body\", {\n          id: \"page-top\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, React.createElement(\"nav\", {\n          class: \"navbar navbar-expand-lg fixed-top\",\n          id: \"mainNav\",\n          style: {\n            backgroundColor: '#DFDFDF',\n            borderTop: '2px solid',\n            borderBottom: '2px solid',\n            color: 'black',\n            paddingTop: '0px',\n            paddingBottom: '0px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          class: \"navbar-brand js-scroll-trigger\",\n          href: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: \"Nationwide.png\",\n          width: \"50\",\n          height: \"50\",\n          alt: \"Nationwide Logo\",\n          style: {\n            borderRadius: '25px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"searchBar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }, React.createElement(Form, {\n          inline: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          id: \"searchText\",\n          onKeyDown: this.callchange,\n          spellcheck: \"true\",\n          size: \"sm\",\n          placeholder: \"Search...\",\n          className: \"mr-sm-1 searchBarText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"searchButton\",\n          onClick: this.search,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: \"search.png\",\n          width: \"30px\",\n          height: \"30px\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        })))), React.createElement(\"div\", {\n          class: \"collapse navbar-collapse\",\n          id: \"navbarResponsive\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        })))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          class: \"container\",\n          style: {\n            marginTop: '60px',\n            marginBottom: '30px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"col-lg-8  \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          style: {\n            color: '#3252A4'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, \"Trending Questions\"), React.createElement(\"p\", {\n          class: \"lead\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }), this.state.TopRatedQ.map((data, index) => React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          id: 'tquestion' + data.q_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, \" \", React.createElement(\"a\", {\n          onClick: () => this.Qstorage(data.question, data.q_id, data.niceDate, data.niceTime),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, index + 1, \") \", data.question)), React.createElement(\"a\", {\n          href: \"#\",\n          onClick: () => this.editQuestion(data.q_id, \"tquestion\" + data.q_id, data.question),\n          style: {\n            marginLeft: '20px',\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, \"Edit\"), React.createElement(\"a\", {\n          href: \"#\",\n          onClick: () => this.handleButtonToggleDeleteQuestionModal(true, data.q_id),\n          style: {\n            marginLeft: '20px',\n            marginRight: '20px',\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }, \"Delete\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }))))), React.createElement(\"div\", {\n          class: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"col-lg-8 \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          style: {\n            color: '#3252A4'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }, \"Questions Which Need Answers\"), React.createElement(\"p\", {\n          class: \"lead\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259\n          },\n          __self: this\n        }), this.state.UnansweredQ.map((data, index) => React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          id: 'uaquestion' + data.q_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, \"   \", React.createElement(\"a\", {\n          onClick: () => this.Qstorage(data.question, data.q_id, data.niceDate, data.niceTime),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, index + 1, \") \", data.question)), React.createElement(\"a\", {\n          href: \"#\",\n          onClick: () => this.editQuestion(data.q_id, \"uaquestion\" + data.q_id, data.question),\n          style: {\n            marginLeft: '20px',\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, \"Edit\"), React.createElement(\"a\", {\n          href: \"#\",\n          onClick: () => this.handleButtonToggleDeleteQuestionModal(true, data.q_id),\n          style: {\n            marginLeft: '20px',\n            marginRight: '20px',\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }, \"Delete\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266\n          },\n          __self: this\n        }))))), React.createElement(\"div\", {\n          class: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"col-lg-8\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          style: {\n            color: '#3252A4'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273\n          },\n          __self: this\n        }, \"Recently Posted Questions\"), React.createElement(\"p\", {\n          class: \"lead\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274\n          },\n          __self: this\n        }), this.state.RecentQ.map((data, index) => React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          id: 'rpquestion' + data.q_id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278\n          },\n          __self: this\n        }, \"  \", React.createElement(\"a\", {\n          onClick: () => this.Qstorage(data.question, data.q_id, data.niceDate, data.niceTime),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278\n          },\n          __self: this\n        }, index + 1, \") \", data.question)), React.createElement(\"a\", {\n          href: \"#\",\n          onClick: () => this.editQuestion(data.q_id, \"rpquestion\" + data.q_id, data.question),\n          style: {\n            marginLeft: '20px',\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279\n          },\n          __self: this\n        }, \"Edit\"), React.createElement(\"a\", {\n          href: \"#\",\n          onClick: () => this.handleButtonToggleDeleteQuestionModal(true, data.q_id),\n          style: {\n            marginLeft: '20px',\n            marginRight: '20px',\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        }, \"Delete\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          },\n          __self: this\n        })))))), React.createElement(DeleteQuestionModal, {\n          title: \"Delete Confirmation\",\n          showModalq: this.state.showModalq,\n          close: () => this.handleButtonToggleDeleteQuestionModal(false),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }), React.createElement(\"footer\", {\n          class: \"py-1 sticky-bottom\",\n          className: \"FAQFooter\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 290\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          class: \"m-0 text-center text-black\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291\n          },\n          __self: this\n        }, \"Copyright \\xA9 APT 2019\"))));\n      }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/admin/Desktop/faq-frontend/src/Components/FAQMainPage.js"],"names":["React","Form","DeleteQuestionModal","Search","Answer","TextArea","Home","Component","constructor","search","e","preventDefault","initialString","document","getElementById","value","queryString","replace","sessionStorage","setItem","setState","handleButtonToggleDeleteQuestionModal","toggle","q_id","showModalq","editQuestion","spanid","question","ref","innerHTML","refTextInput1","createElement","refConfirmButton1","type","className","addEventListener","data","fetch","method","headers","body","JSON","stringify","window","location","style","minWidth","maxWidth","marginLeft","appendChild","componentDidMount","dataUnanswered","dataRecent","then","response","json","dataRe","dataUn","dataTop","RecentQ","UnansweredQ","TopRatedQ","handleButtonToggleAskModal","showModal","textAnswer","callchange","console","log","keyCode","state","showIssueModal","Qstorage","postDQ","postTQ","render","backgroundColor","borderTop","borderBottom","color","paddingTop","paddingBottom","borderRadius","marginTop","marginBottom","map","index","niceDate","niceTime","marginRight"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form} from 'react-bootstrap'\r\nimport './css/FAQ.css'\r\nimport DeleteQuestionModal from './DeleteQuestionModal.component'\r\nimport Search from './Search.component'\r\nimport Answer from './AnswerPage.component'\r\nimport { TextArea } from 'semantic-ui-react'\r\n\r\nexport default class Home extends React.Component {\r\n    constructor() {\r\n        super();\r\n        \r\n\r\n        this.state = {                                                        //this.state represent the rendered values, i.e. whatâ€™s currently on the screen\r\n            RecentQ: [],\r\n            UnansweredQ: [],\r\n            TopRatedQ: [],\r\n            showIssueModal: true,\r\n            search:false,\r\n            Answer:false\r\n            //Name of what you want \r\n        }\r\n    }\r\n    /**\r\n     * the search function takes the text in the search bar, filters out special characters and stores the result in the session storage.\r\n     * it then sets the search state as true which will trigger the rendering of the search component.\r\n     * @memberof Home\r\n     */\r\n\r\n   \r\n    search = (e) => {\r\n        e.preventDefault()\r\n        var initialString = document.getElementById(\"searchText\").value\r\n        var queryString = initialString.replace(/[^a-zA-Z ]/g, \"\")\r\n        sessionStorage.setItem('SearchText',queryString)\r\n        this.setState({\r\n                            \r\n                            search:true\r\n                        })\r\n           \r\n    }\r\n\r\n    /**\r\n     * This function simple triggers when the delete button is pressed for a delete confirmation \r\n     * modal to appear on screen\r\n     * @memberof Home\r\n     */\r\n    handleButtonToggleDeleteQuestionModal = (toggle,q_id) => {\r\n        this.setState({\r\n            showModalq: toggle\r\n            \r\n        });\r\n        sessionStorage.setItem('q_id', q_id)\r\n    }\r\n    \r\n\r\n    /**\r\n     *The Qstorage is simply a function to set values to specific items within the sessionStorage,\r\n     * this allows them to be referenced and used elsewhere within the application\r\n\r\n     * @param {*} question\r\n     * @param {*} q_id\r\n     * @param {*} postDQ\r\n     * @param {*} postTQ\r\n     * @memberof Home\r\n     */\r\n    Qstorage(question, q_id, postDQ, postTQ) {\r\n        sessionStorage.setItem('questions', question)\r\n        sessionStorage.setItem('q_id', q_id)\r\n        sessionStorage.setItem('postDQ', postDQ)\r\n        sessionStorage.setItem('postTQ', postTQ)\r\n        this.setState({                 \r\n            Answer:true\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * The editQuestion function allows a user to amend a question they have previously submitted\r\n     * @memberof Home\r\n     */\r\n    editQuestion = (q_id,spanid, question ) => {\r\n        var ref = document.getElementById(spanid)\r\n        ref.innerHTML = \"\"\r\n        var refTextInput1 = document.createElement(\"TextArea\");\r\n        var refConfirmButton1 = document.createElement(\"input\");\r\n        refConfirmButton1.type = \"Button\"\r\n        refConfirmButton1.value = \"Confirm\"\r\n        refConfirmButton1.className = \"EditConfirm\"\r\n        refConfirmButton1.addEventListener(\"click\", function () {\r\n            let data = {\r\n                \"q_id\": q_id,\r\n                \"updQ\": refTextInput1.value\r\n            }\r\n            fetch(`http://localhost:4001/Questions/UpdateQ`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n            window.location.replace(`http://localhost:3000/`)\r\n        })\r\n        refTextInput1.style.minWidth = \"60%\"\r\n        refTextInput1.style.maxWidth = \"60%\"\r\n        refTextInput1.style.marginLeft = \"20px\"\r\n        refTextInput1.value = question\r\n        ref.appendChild(refTextInput1)\r\n        ref.appendChild(refConfirmButton1)\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * The componentDidMount function automatically executes when the home page is loaded. The specifics in this\r\n     * case are to retireve the Recent, Unanswered and Top Rated questions and display them\r\n     * @memberof Home\r\n     */\r\n    componentDidMount = async () => {\r\n\r\n\r\n        let dataUnanswered = \"\"\r\n        let dataRecent = \"\"\r\n\r\n        await fetch(\"http://localhost:4001/Questions/RecentQ\")                         //Url from backend\r\n            .then(response => response.json())\r\n            .then(dataRe => {\r\n                dataRecent = dataRe;\r\n            })\r\n        await fetch(\"http://localhost:4001/Questions/UnansweredQ\")                                  //Url from backend\r\n            .then(response => response.json())\r\n            .then(dataUn => {\r\n                dataUnanswered = dataUn\r\n            })\r\n        await fetch(\"http://localhost:4001/Questions/TopRatedQ\")                                  //Url from backend\r\n            .then(response => response.json())\r\n            .then(dataTop => {\r\n\r\n                this.setState({\r\n                    RecentQ: dataRecent,\r\n                    UnansweredQ: dataUnanswered,\r\n                    TopRatedQ: dataTop\r\n                })\r\n            })\r\n    }\r\n\r\n    /**\r\n     * The below function simply triggers when the ask question button is pressed and causes the ask question \r\n     * modal to appear on screen\r\n     * @memberof Home\r\n     */\r\n\r\n\r\n    handleButtonToggleAskModal = (toggle) => {\r\n\r\n        this.setState({\r\n            showModal: toggle\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The textAnswer function gives an id for the textfield used within the AskQuestionModal component\r\n     * @memberof Home\r\n     */\r\n    textAnswer = () => {\r\n        return (\r\n            <TextArea id=\"textQuestion\" style={{ maxWidth: '100%', minWidth: '100%' }} />\r\n\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Function for if enter is pressed then it will run the search function\r\n     * @memberof Home\r\n     */\r\n    callchange = (e) => {\r\n        console.log(e.keyCode)\r\n        if (e.keyCode == 13) {\r\n            this.search(e)\r\n        }\r\n        //e.preventDefault()\r\n    }\r\n    render() {\r\n        \r\n    /**\r\n     * This if statement checks whether the current webpage is on the search page - If true, it completes\r\n     * a search of the DB for the entered fields, if nothing is found displays a message and shows the AskQuestion\r\n     * button\r\n     * @returns\r\n     * @memberof Home\r\n     */\r\n        if (this.state.search==true) {\r\n           return <div>\r\n               <Search/>\r\n           </div>\r\n        }\r\n\r\n       else if(this.state.Answer==true) {\r\n            return <div>\r\n                <Answer/>\r\n            </div>\r\n        }\r\n        /**\r\n     * This else statement executes when the user first loads the homepage and displays a range of certain\r\n     * specified questions - eg trending etc - along with the edit and delete buttons if the user has the\r\n     * appropriate permissions\r\n     * @returns\r\n     * @memberof Home\r\n     */\r\n        else {\r\n            return (\r\n                <div>\r\n                    <body id=\"page-top\">\r\n\r\n                        <nav class=\"navbar navbar-expand-lg fixed-top\" id=\"mainNav\" style={{ backgroundColor: '#DFDFDF', borderTop: '2px solid', borderBottom: '2px solid', color: 'black', paddingTop: '0px', paddingBottom: '0px' }}>\r\n                            <div class=\"container\">\r\n                                <a class=\"navbar-brand js-scroll-trigger\" href=\"/\"><img\r\n                                    src=\"Nationwide.png\"\r\n                                    width=\"50\"\r\n                                    height=\"50\"\r\n                                    alt=\"Nationwide Logo\"\r\n                                    style={{ borderRadius: '25px' }} /></a>\r\n                                <div className='searchBar'> \r\n                                <Form inline>\r\n                                    <input id=\"searchText\" onKeyDown={this.callchange} spellcheck='true' size=\"sm\" placeholder=\"Search...\" className=\"mr-sm-1 searchBarText\" />\r\n                                <button className='searchButton' onClick={this.search}><img src=\"search.png\" width='30px' height='30px'></img></button>\r\n                                </Form>\r\n                                </div>\r\n                                <div class=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n\r\n                                </div>\r\n                            </div>\r\n                        </nav>\r\n                    </body>\r\n                    <br />\r\n\r\n                    <div class=\"container\" style={{ marginTop: '60px', marginBottom: '30px' }}>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-lg-8  \">\r\n                                <h3 style={{ color: '#3252A4' }}>Trending Questions</h3>\r\n                                <p class=\"lead\"></p>\r\n                                {\r\n                                    this.state.TopRatedQ.map((data, index) =>\r\n                                        \r\n                                        <div>\r\n\r\n                                           <span id={'tquestion' + data.q_id}> <a  onClick={() => this.Qstorage(data.question, data.q_id, data.niceDate, data.niceTime)}>{index + 1}) {data.question}</a></span>\r\n                                            \r\n                                        <a href='#' onClick={() => this.editQuestion(data.q_id,\"tquestion\" + data.q_id, data.question)} style={{ marginLeft: '20px', color:'red' }}>Edit</a>\r\n                                        <a href='#'onClick={() => this.handleButtonToggleDeleteQuestionModal(true, data.q_id)} style={{ marginLeft: '20px', marginRight: '20px', color:'red' }}>Delete</a><br />\r\n\r\n                                            <br />\r\n                                        </div>\r\n                                    )}\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-lg-8 \">\r\n                                <h3 style={{ color: '#3252A4' }}>Questions Which Need Answers</h3>\r\n                                <p class=\"lead\"></p>\r\n                                {\r\n                                    this.state.UnansweredQ.map((data, index) =>\r\n                                        <div>\r\n                                          <span id={'uaquestion' + data.q_id}>   <a  onClick={() => this.Qstorage(data.question, data.q_id, data.niceDate, data.niceTime)}>{index + 1}) {data.question}</a></span>\r\n                                        <a href='#' onClick={() => this.editQuestion(data.q_id,\"uaquestion\"+ data.q_id, data.question)} style={{ marginLeft: '20px', color:'red' }}>Edit</a>\r\n                                        <a href='#' onClick={() => this.handleButtonToggleDeleteQuestionModal(true, data.q_id)} style={{ marginLeft: '20px', marginRight: '20px', color:'red' }}>Delete</a><br />\r\n                                        <br />\r\n                                        </div>\r\n                                    )}\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-lg-8\">\r\n                                <h3 style={{ color: '#3252A4' }}>Recently Posted Questions</h3>\r\n                                <p class=\"lead\"></p>\r\n                                {\r\n                                    this.state.RecentQ.map((data, index) =>\r\n                                        <div>\r\n                                           <span id={'rpquestion' + data.q_id}>  <a onClick={() => this.Qstorage(data.question, data.q_id, data.niceDate, data.niceTime)}>{index + 1}) {data.question}</a></span>\r\n                                        <a href='#' onClick={() => this.editQuestion(data.q_id,\"rpquestion\"+data.q_id, data.question)} style={{ marginLeft: '20px', color:'red' }}>Edit</a>\r\n                                        <a href='#' onClick={() => this.handleButtonToggleDeleteQuestionModal(true, data.q_id)} style={{ marginLeft: '20px', marginRight: '20px', color:'red' }}>Delete</a><br/>\r\n                                        <br />\r\n                                        </div>\r\n                                    )}\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <DeleteQuestionModal title={\"Delete Confirmation\"} showModalq={this.state.showModalq} close={() => this.handleButtonToggleDeleteQuestionModal(false)} />\r\n                    <footer class=\"py-1 sticky-bottom\" className='FAQFooter'>\r\n                        <div class=\"container\">\r\n                            <p class=\"m-0 text-center text-black\">Copyright &copy; APT 2019</p>\r\n                        </div>\r\n                    </footer>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}