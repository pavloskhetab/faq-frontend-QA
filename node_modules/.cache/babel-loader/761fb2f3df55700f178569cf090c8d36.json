{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\faq-frontend\\\\src\\\\Components\\\\CommentModal.component.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport Modal from 'react-bootstrap/Modal';\nimport './css/FAQ.css';\n\nclass CommentModal extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.postComment = e => {\n      e.preventDefault();\n      console.log(document.getElementById(\"textComment\"));\n      this.setState({\n        textComment: document.getElementById(\"textComment\").value\n      }, () => {\n        let data = {\n          \"a_id\": sessionStorage.getItem('a_id'),\n          \"userID\": 71,\n          \"comment\": this.state.textComment\n        };\n        fetch(\"http://localhost:4001/Comments/PostC\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        }).then(response => {\n          if (response.status === 200) {\n            sessionStorage.setItem('ReloadingAfterPost', true);\n            window.location.reload();\n          } else {\n            alert('Failed to post comment');\n          }\n\n          ;\n        });\n        console.log(this.state.textComment);\n      });\n    };\n\n    this.state = {\n      showModal: this.props.showModal,\n      content: this.props.content,\n      title: this.props.title\n    };\n\n    this.close = () => {\n      this.setState({\n        showModal: this.props.showModal\n      });\n    };\n  }\n  /**\r\n   * Function to show the model using the state\r\n   * from another .js file - hence use of props\r\n   *\r\n   * @param {*} nextProps\r\n   * @memberof CommentModal\r\n   */\n\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      showModal: nextProps.showModal\n    });\n  }\n  /**\r\n  * Function to post a comment to the database using \r\n  * /Comment/Post\r\n  * Once the comment has been sent, it reloads the overall\r\n  * answers page\r\n  *\r\n  * @memberof CommentModal\r\n  */\n\n\n  /**\r\n   *This render is the design of the Comment Modal that appears on screen to allow users to comment\r\n   *\r\n   * @returns\r\n   * @memberof CommentModal\r\n   */\n  render() {\n    return React.createElement(Modal, {\n      show: this.state.showModal,\n      onHide: this.props.close ? this.props.close : this.close,\n      backdrop: true,\n      backdropClassName: \"backdrop-style\",\n      dialogClassName: \"modal-style\",\n      \"aria-labelledby\": \"modal-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      id: \"modal-label\",\n      className: \"overlay-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Add a Comment\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.content), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"danger\",\n      onClick: this.postComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \" Submit\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: this.props.close ? this.props.close : this.close,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" Close\")));\n  }\n\n}\n\nexport default CommentModal;","map":{"version":3,"sources":["C:/Users/admin/Desktop/faq-frontend/src/Components/CommentModal.component.js"],"names":["React","Component","Button","Modal","CommentModal","constructor","args","postComment","e","preventDefault","console","log","document","getElementById","setState","textComment","value","data","sessionStorage","getItem","state","fetch","method","headers","body","JSON","stringify","then","response","status","setItem","window","location","reload","alert","showModal","props","content","title","close","componentWillReceiveProps","nextProps","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport './css/FAQ.css'\r\n\r\nclass CommentModal extends Component {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.state = {\r\n            showModal: this.props.showModal,\r\n            content: this.props.content,\r\n            title: this.props.title\r\n        };\r\n        this.close = () => {\r\n            this.setState({ showModal: this.props.showModal });\r\n        };\r\n    }\r\n    /**\r\n     * Function to show the model using the state\r\n     * from another .js file - hence use of props\r\n     *\r\n     * @param {*} nextProps\r\n     * @memberof CommentModal\r\n     */\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            showModal: nextProps.showModal\r\n        })\r\n    }\r\n     /**\r\n     * Function to post a comment to the database using \r\n     * /Comment/Post\r\n     * Once the comment has been sent, it reloads the overall\r\n     * answers page\r\n     *\r\n     * @memberof CommentModal\r\n     */\r\n    postComment = (e) =>{\r\n        e.preventDefault();\r\n        console.log(document.getElementById(\"textComment\"))\r\n       \r\n        this.setState({\r\n            textComment:document.getElementById(\"textComment\").value\r\n        }, () => {\r\n            let data = {\r\n                \r\n                \"a_id\": sessionStorage.getItem('a_id'),\r\n                \"userID\": 71,   \r\n                \"comment\":this.state.textComment                                                           \r\n            }\r\n            fetch(`http://localhost:4001/Comments/PostC`, {                                  \r\n                method: 'POST',                                                            \r\n                headers: {\r\n                    'Content-Type': 'application/json',                                  \r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(response => {                                                    \r\n                    if (response.status === 200) {\r\n                        sessionStorage.setItem('ReloadingAfterPost',true)\r\n                        window.location.reload()\r\n                       \r\n                    } else {\r\n                        alert('Failed to post comment');\r\n                    };\r\n                })\r\n                console.log(this.state.textComment)\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     *This render is the design of the Comment Modal that appears on screen to allow users to comment\r\n     *\r\n     * @returns\r\n     * @memberof CommentModal\r\n     */\r\n    render() {\r\n        return (\r\n            <Modal\r\n                show={this.state.showModal}\r\n                onHide={this.props.close ? this.props.close : this.close}\r\n                backdrop={true}\r\n                backdropClassName=\"backdrop-style\"\r\n                dialogClassName=\"modal-style\"\r\n                aria-labelledby=\"modal-label\"\r\n            >\r\n                <Modal.Header closeButton={true}>\r\n                    <h4 id=\"modal-label\" className=\"overlay-title\">Add a Comment</h4>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {this.state.content}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    \r\n                    <Button variant='danger' onClick={this.postComment}> Submit\r\n                    </Button><br></br>\r\n                    <Button variant='secondary' onClick={this.props.close ? this.props.close : this.close}> Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\nexport default CommentModal;"]},"metadata":{},"sourceType":"module"}