{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\faq-frontend\\\\src\\\\Components\\\\AnswerModal.component.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport Modal from 'react-bootstrap/Modal';\nimport './css/FAQ.css';\n\nclass AnswerQuestionsModal extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.postAnswer = e => {\n      e.preventDefault();\n      this.setState({\n        textAnswer: document.getElementById(\"textAnswer\").value\n      }, () => {\n        let data = {\n          \"q_id\": sessionStorage.getItem(\"q_id\"),\n          \"u_id\": 71,\n          //We create a variable called data and store what is currently in the state into it\n          \"answer\": this.state.textAnswer\n        };\n        fetch(\"http://localhost:4001/Answers/PostA\", {\n          //This is the fetch request that actually communicates with the backend\n          method: 'POST',\n          //This defines the method as a POST method\n          headers: {\n            'Content-Type': 'application/json' //This converts it into JSON format\n\n          },\n          body: JSON.stringify(data)\n        }).then(response => {\n          //Error handling\n          if (response.status === 200) {\n            sessionStorage.setItem('ReloadingAfterPost', true);\n            window.location.reload();\n          } else {\n            alert('Failed to post answer');\n          }\n\n          ;\n        });\n        console.log(this.state);\n      });\n    };\n\n    this.state = {\n      showModal1: this.props.showModal1,\n      content: this.props.content,\n      title: this.props.title,\n      textAnswer: \"\"\n    };\n\n    this.close = () => {\n      this.setState({\n        showModal1: this.props.showModal1\n      });\n    };\n  }\n  /**\r\n   * Function to show the model using the state\r\n   * from another .js file - hence use of props\r\n   *\r\n   * @param {*} nextProps\r\n   * @memberof AnswerQuestionsModal\r\n   */\n\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      showModal1: nextProps.showModal1\n    });\n  }\n  /**\r\n   * Function to post an answer to the database using \r\n   * /Answers/PostA\r\n   * Once answer has been sent, it reloads the overall\r\n   * answers page\r\n   *\r\n   * @memberof AnswerQuestionsModal\r\n   */\n\n\n  render() {\n    return React.createElement(Modal, {\n      show: this.state.showModal1,\n      onHide: this.props.close ? this.props.close : this.close,\n      backdrop: true,\n      backdropClassName: \"backdrop-style\",\n      dialogClassName: \"modal-style\",\n      \"aria-labelledby\": \"modal-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      id: \"modal-label\",\n      className: \"overlay-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Answer Question\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.content), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.postAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \" Submit\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: this.props.close ? this.props.close : this.close,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \" Close\")));\n  }\n\n}\n\nexport default AnswerQuestionsModal;","map":{"version":3,"sources":["C:/Users/admin/Desktop/faq-frontend/src/Components/AnswerModal.component.js"],"names":["React","Component","Button","Modal","AnswerQuestionsModal","constructor","args","postAnswer","e","preventDefault","setState","textAnswer","document","getElementById","value","data","sessionStorage","getItem","state","fetch","method","headers","body","JSON","stringify","then","response","status","setItem","window","location","reload","alert","console","log","showModal1","props","content","title","close","componentWillReceiveProps","nextProps","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport './css/FAQ.css'\r\nclass AnswerQuestionsModal extends Component {\r\n    constructor(...args) {\r\n        super(...args);\r\n        this.state = {\r\n            showModal1: this.props.showModal1,\r\n            content: this.props.content,\r\n            title: this.props.title,\r\n            textAnswer:\"\"\r\n        };\r\n        this.close = () => {\r\n            this.setState({ showModal1: this.props.showModal1 });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Function to show the model using the state\r\n     * from another .js file - hence use of props\r\n     *\r\n     * @param {*} nextProps\r\n     * @memberof AnswerQuestionsModal\r\n     */\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            showModal1: nextProps.showModal1\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Function to post an answer to the database using \r\n     * /Answers/PostA\r\n     * Once answer has been sent, it reloads the overall\r\n     * answers page\r\n     *\r\n     * @memberof AnswerQuestionsModal\r\n     */\r\n    postAnswer = (e) =>{\r\n        e.preventDefault();\r\n        this.setState({\r\n            textAnswer:document.getElementById(\"textAnswer\").value\r\n        }, () => {\r\n            let data = {\r\n                \"q_id\": sessionStorage.getItem(\"q_id\"),\r\n                \"u_id\": 71,                                                                  //We create a variable called data and store what is currently in the state into it\r\n                \"answer\":this.state.textAnswer\r\n            }\r\n            fetch(`http://localhost:4001/Answers/PostA`, {                                    //This is the fetch request that actually communicates with the backend\r\n                method: 'POST',                                                             //This defines the method as a POST method\r\n                headers: {\r\n                    'Content-Type': 'application/json',                                     //This converts it into JSON format\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then(response => {                                                         //Error handling\r\n                    if (response.status === 200) {\r\n                        sessionStorage.setItem('ReloadingAfterPost',true)\r\n                        window.location.reload()\r\n                    } else {\r\n                        alert('Failed to post answer');\r\n                    };\r\n                })\r\n            console.log(this.state)\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n                show={this.state.showModal1}\r\n                onHide={this.props.close ? this.props.close : this.close}\r\n                backdrop={true}\r\n                backdropClassName=\"backdrop-style\"\r\n                dialogClassName=\"modal-style\"\r\n                aria-labelledby=\"modal-label\"\r\n            >\r\n                <Modal.Header closeButton={true}>\r\n                    <h4 id=\"modal-label\" className=\"overlay-title\">Answer Question</h4>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {this.state.content}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant='primary' onClick={this.postAnswer}> Submit\r\n                    </Button><br></br>\r\n                    <Button variant='secondary' onClick={this.props.close ? this.props.close : this.close}> Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\nexport default AnswerQuestionsModal;\r\n\r\n"]},"metadata":{},"sourceType":"module"}